{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","common","instance","create","baseURL","window","location","origin","App","props","state","weather","loading","onInputChange","func","wait","timeout","args","callNow","clearTimeout","setTimeout","debounce","e","city","target","value","length","setState","get","getWOEID","then","response","data","WOEID","getWeather","className","type","placeholder","onChange","this","JSON","stringify","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iSAIAA,IAAMC,SAASC,QAAQC,OAAO,+BAAiC,IAC/DH,IAAMC,SAASC,QAAQC,OAAO,gCAAkC,GAEhE,IAAMC,EAAWJ,IAAMK,OAAO,CAC7BC,QAASC,OAAOC,SAASC,OACzBP,QAAS,CACR,eAAgB,mBAChB,OAAU,oCACV,8BAA+B,IAC/B,+BAAgC,oD,IA+EnBQ,E,kDA9Cd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CAAEC,QAAS,KAAMC,SAAS,GAEvC,EAAKC,cAjCP,SAAkBC,EAAMC,GACvB,IAAIC,EAAU,KAEd,OAAO,SAA0BC,GAChC,IAIIC,EAAsB,OAAZF,EAEdG,aAAaH,GAEbA,EAAUI,YARE,WACXJ,EAAU,OAOiBD,GAExBG,GAASJ,EAAKG,IAmBGI,EAAS,SAACC,GAC9B,IAAIC,EAAOD,EAAEE,OAAOC,MAEhBF,EAAKG,QAAU,IAElB,EAAKC,SAAS,CAAEf,SAAS,IAnB7B,SAAkBW,GACjB,OAAOrB,EAAS0B,IAAI,8BAAgCL,GAoBjDM,CAASN,GAAMO,MAAK,SAAAC,GACnB,IAAIC,EAAOD,EAASC,KAChBA,EAAKN,OAAS,GAnBvB,SAAoBO,GACnB,OAAO/B,EAAS0B,IAAI,iBAAmBK,EAAQ,KAoB1CC,CADYF,EAAK,GAAL,OACMF,MAAK,SAAAC,GACtB,IAAIpB,EAAUoB,EAASC,KACvB,EAAKL,SAAS,CACbhB,QAASA,EACTC,SAAS,aAMZ,KAzBe,E,qDA6BlB,OACC,yBAAKuB,UAAU,aACd,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBC,SAAUC,KAAK1B,gBAExC,MAAtB0B,KAAK7B,MAAME,QAAmB,mDAAgC,6BAEtC,OAAvB2B,KAAK7B,MAAMC,QAAoB,uBAAGwB,UAAU,cAC1CK,KAAKC,UAAUF,KAAK7B,MAAMC,UACpB,W,GAvCI+B,IAAMC,WChCJC,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ada63a3a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\naxios.defaults.headers.common['Access-Control-Allow-Origin'] = \"*\";\naxios.defaults.headers.common['Access-Control-Allow-Headers'] = \"\";\n\nconst instance = axios.create({\n\tbaseURL: window.location.origin,\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t\t'Accept': 'application/json, text/plain, */*',\n\t\t'Access-Control-Allow-Origin': '*',\n\t\t'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n\t}\n});\n\nfunction debounce(func, wait) {\n\tvar timeout = null;\n\n\treturn function executedFunction(args) {\n\t\tvar later = function () {\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tvar callNow = timeout === null;\n\n\t\tclearTimeout(timeout);\n\n\t\ttimeout = setTimeout(later, wait);\n\n\t\tif (callNow) func(args);\n\t};\n};\n\n\nfunction getWOEID(city) {\n\treturn instance.get(\"/api/location/search?query=\" + city);\n}\n\nfunction getWeather(WOEID) {\n\treturn instance.get(\"/api/location/\" + WOEID + \"/\");\n}\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { weather: null, loading: false };\n\n\t\tthis.onInputChange = debounce((e) => {\n\t\t\tvar city = e.target.value;\n\n\t\t\tif (city.length >= 4) {\n\n\t\t\t\tthis.setState({ loading: true });\n\n\t\t\t\tgetWOEID(city).then(response => {\n\t\t\t\t\tvar data = response.data;\n\t\t\t\t\tif (data.length > 0) {\n\t\t\t\t\t\tvar WOEID = data[0][\"woeid\"]\n\t\t\t\t\t\tgetWeather(WOEID).then(response => {\n\t\t\t\t\t\t\tvar weather = response.data;\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tweather: weather,\n\t\t\t\t\t\t\t\tloading: false\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}, 3000);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<input type=\"text\" placeholder=\"Enter the City\" onChange={this.onInputChange} />\n\n\t\t\t\t{this.state.loading == null ? (<h4>Weather is loading </h4>) : <div>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.weather !== null ? (<p className=\"bg-primary\">\n\t\t\t\t\t\t\t{JSON.stringify(this.state.weather)}\n\t\t\t\t\t\t</p>) : null\n\t\t\t\t\t}\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}